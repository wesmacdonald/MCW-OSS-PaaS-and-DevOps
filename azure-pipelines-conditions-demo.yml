# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
   Version.Revision: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 0)]

name: '$(Build.DefinitionName) 1.0.0.$(Date:yy)$(DayOfYear)$(Version.Revision)'

parameters:
  - name: DoJobOne
    default: false
    type: boolean


stages:
  - stage: demo
    jobs:

    # Set an output variable from job One
    - job: One
      condition: eq('${{ parameters.DoJobOne }}', true)
      pool:
        vmImage: 'windows-2019'
      steps:
      - powershell: |
          echo "##vso[task.setvariable variable=JobOneRan;isOutput=true]false"
          throw "simulate Job One failing"
          echo "##vso[task.setvariable variable=JobOneRan;isOutput=true]true"
        name: setvarStep
      - script: |
          echo $(setvarStep.JobOneRan)          
        name: echovariable

    
    - job: Two
      condition: and(always(), eq('${{ parameters.DoJobOne }}', eq(dependencies.One.outputs['setvarStep.JobOneRan'], true)))
      dependsOn: One
      pool:
        vmImage: 'windows-2019'
      variables:
        myVariableFromJobOne: $[ dependencies.One.outputs['setvarStep.JobOneRan'] ]
      steps:
      - script: echo $(myVariableFromJobOne)
        name: echovariable

    - job: Three
      condition: and(eq('${{ parameters.DoJobOne }}', false), ne(dependencies.One.outputs['setvarStep.JobOneRan'], 'true'))
      dependsOn: One
      pool:
        vmImage: 'windows-2019'
      variables:
        myVariableFromJobOne: $[ dependencies.One.outputs['setvarStep.JobOneRan'] ]
      steps:
      - script: |
          echo $(myVariableFromJobOne)
          echo ${{ parameters.DoJobOne }}
        name: echovariable
